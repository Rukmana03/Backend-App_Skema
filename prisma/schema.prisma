generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  username       String         @unique @db.VarChar(50)
  email          String         @unique
  password       String
  role           Role
  fcmToken       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  refreshToken   String?        @unique
  profile        Profile?
  assignments    Assignment[]   @relation("TeacherAssignments")
  comments       Comment[]
  fileStorages   FileStorage[]
  grades         Grade[]
  notifications  Notification[]
  studentClasses StudentClass[]
  subjectClasses SubjectClass[]
  
  submissions    Submission[]

  @@map("users")
}

model School {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  city        String
  province    String
  postalCode  String
  phoneNumber String?
  email       String?
  status      Status   @default(Active)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  classes     Class[]
}

model Class {
  id             Int            @id @default(autoincrement())
  schoolId       Int
  className      String
  status         Status
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  school         School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentClasses StudentClass[]
  subjectClasses SubjectClass[]

  @@map("classes")
}

model StudentClass {
  id        Int      @id @default(autoincrement())
  classId   Int
  studentId Int
  status    Status
  joinedAt  DateTime @default(now())

  Class     Class    @relation(fields: [classId], references: [id])
  Student   User     @relation(fields: [studentId], references: [id])

  @@map("student_classes")
}

model Subject {
  id          Int          @id @default(autoincrement())
  subjectName String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  subjectClasses SubjectClass[] 

  @@map("subjects")
}

model SubjectClass {
  id         Int      @id @default(autoincrement())
  subjectId  Int
  classId    Int
  teacherId  Int
  code       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  deletedAt  DateTime?

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher User    @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  assignments Assignment[]

  @@map("subject_classes")
}

model Assignment {
  id             Int            @id @default(autoincrement())
  title          String
  description    String?
  subjectClassId Int
  teacherId      Int
  deadline       DateTime       
  assignmentType AssignmentType
  taskCategory   TaskCategory
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  subjectClass SubjectClass @relation(fields: [subjectClassId], references: [id], onDelete: Cascade)
  teacher      User         @relation("TeacherAssignments", fields: [teacherId], references: [id], onDelete: Cascade)
  submissions  Submission[]
  comments     Comment[]
  files        AssignmentFile[]

  @@map("assignments")
}

model Submission {
  id             Int              @id @default(autoincrement())
  assignmentId   Int              
  studentId      Int               
  submissionDate DateTime
  status         SubmissionStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  comments   Comment[]
  grades     Grade[]
  files      SubmissionFile[]

  @@map("submissions")
}

model Grade {
  id           Int        @id @default(autoincrement())
  submissionId Int
  teacherId    Int
  score        Decimal    @db.Decimal(5, 2)
  feedback     String?
  gradedDate   DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  submission   Submission @relation(fields: [submissionId], references: [id])
  teacher      User       @relation(fields: [teacherId], references: [id])

  @@map("grades")
}

model Comment {
  id           Int         @id @default(autoincrement())
  userId         Int
  submissionId   Int?
  assignmentId   Int?
  content      String
  commentDate  DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  assignment   Assignment?  @relation(fields: [assignmentId], references: [id])
  submission   Submission? @relation(fields: [submissionId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int
  message   String
  status    NotificationStatus
  sentDate  DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?
  user      User               @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model FileStorage {
  id         Int       @id @default(autoincrement())
  userId     Int
  fileName   String
  fileUrl    String
  uploadDate DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  user       User      @relation(fields: [userId], references: [id])
  assignments AssignmentFile[]
  submissions SubmissionFile[]

  @@map("file_storages")
}
model AssignmentFile {
  id           Int  @id @default(autoincrement())
  assignmentId Int
  fileId       Int

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  file       FileStorage @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("assignment_files")
}

model SubmissionFile {
  id           Int  @id @default(autoincrement())
  submissionId Int
  fileId       Int

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  file       FileStorage @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("submission_files")
}
model Profile {
  bio            String?
  name           String    @db.VarChar(100)
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  id             Int       @id @default(autoincrement())
  identityNumber String    @unique
  profilePhoto   String?
  updatedAt      DateTime  @updatedAt
  userId         Int       @unique
  users          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  Admin
  Teacher
  Student
}

enum Status {
  Active
  Inactive
}

enum AssignmentType {
  Daily
  Weekly
}

enum SubmissionStatus {
  Pending
  Submitted
  Graded
}

enum NotificationStatus {
  Unread
  Read
}

enum TaskCategory {
  Essay
  MultipleChoice
  Project
}
