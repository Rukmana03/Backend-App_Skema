generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  username        String         @unique @db.VarChar(50)
  email           String         @unique
  password        String
  role            Role
  fcmToken        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  refreshToken    String?        @unique
  refreshAttempts Int       @default(0)
  assignments     Assignment[]   @relation("TeacherAssignments")
  comments        Comment[]
  fileStorages    FileStorage[]
  grades          Grade[]
  notifications   Notification[]
  profile         Profile?
  studentClasses  StudentClass[]
  subjectClasses  SubjectClass[]
  submissions     Submission[]

  @@map("users")
}

model School {
  id          Int       @id @default(autoincrement())
  name        String
  npsn        String    @unique
  address     String?
  city        String
  province    String
  postalCode  String
  phoneNumber String?
  email       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  classes     Class[]

  @@map("schools")
}

model Class {
  id             Int            @id @default(autoincrement())
  schoolId       Int
  className      String
  status         Status
  academicYearId Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id])
  school         School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentClasses StudentClass[]
  subjectClasses SubjectClass[]

  @@map("classes")
}

model StudentClass {
  id             Int          @id @default(autoincrement())
  classId        Int
  studentId      Int
  joinedAt       DateTime     @default(now())
  academicYearId Int

  classStatus    ClassStatus  @default(Active)
  subjectClasses SubjectClass[]
  
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  class          Class        @relation(fields: [classId], references: [id])
  student        User         @relation(fields: [studentId], references: [id])

  @@unique([studentId, academicYearId, classStatus])
  @@map("student_classes")
}

model Subject {
  id             Int            @id @default(autoincrement())
  subjectName    String
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  subjectClasses SubjectClass[]

  @@map("subjects")
}

model AcademicYear {
  id             Int            @id @default(autoincrement())
  year           String         @unique
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  class Class[]
  studentClasses StudentClass[]
  subjectClasses SubjectClass[]

  @@map("AcademicYear")
}

model SubjectClass {
  id               Int          @id @default(autoincrement())
  subjectId        Int
  classId          Int
  teacherId        Int
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  deletedAt        DateTime?
  academicYearId   Int
  subjectClassCode String       @unique

  studentClasses   StudentClass[]
  assignments      Assignment[]
  academicYear     AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class            Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject          Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher          User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("subject_classes")
}

model Assignment {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  subjectClassId Int
  teacherId      Int
  deadline       DateTime
  assignmentType AssignmentType
  taskCategory   TaskCategory
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  
  files          AssignmentFile[]
  subjectClass   SubjectClass     @relation(fields: [subjectClassId], references: [id], onDelete: Cascade)
  teacher        User             @relation("TeacherAssignments", fields: [teacherId], references: [id], onDelete: Cascade)
  comments       Comment[]
  submissions    Submission[]

  @@map("assignments")
}

model Submission {
  id             Int              @id @default(autoincrement())
  assignmentId   Int
  studentId      Int
  submissionDate DateTime
  status         SubmissionStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  comments       Comment[]
  grades         Grade[]
  files          SubmissionFile[]
  assignment     Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student        User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Grade {
  id           Int        @id @default(autoincrement())
  submissionId Int
  teacherId    Int
  score        Decimal    @db.Decimal(5, 2)
  feedback     String?
  gradedDate   DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  submission   Submission @relation(fields: [submissionId], references: [id])
  teacher      User       @relation(fields: [teacherId], references: [id])

  @@map("grades")
}

model Comment {
  id           Int         @id @default(autoincrement())
  userId       Int
  submissionId Int?
  assignmentId Int?
  content      String
  commentDate  DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  submission   Submission? @relation(fields: [submissionId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int
  message   String
  status    NotificationStatus
  sentDate  DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?
  user      User               @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model FileStorage {
  id          Int              @id @default(autoincrement())
  userId      Int
  fileName    String
  fileUrl     String
  uploadDate  DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  assignments AssignmentFile[]
  user        User             @relation(fields: [userId], references: [id])
  submissions SubmissionFile[]

  @@map("file_storages")
}

model AssignmentFile {
  id           Int         @id @default(autoincrement())
  assignmentId Int
  fileId       Int
  assignment   Assignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  file         FileStorage @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("assignment_files")
}

model SubmissionFile {
  id           Int         @id @default(autoincrement())
  submissionId Int
  fileId       Int
  file         FileStorage @relation(fields: [fileId], references: [id], onDelete: Cascade)
  submission   Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_files")
}

model Profile {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  name           String    @db.VarChar(100)
  identityNumber String?   @unique
  bio            String?
  profilePhoto   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  users          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

enum Role {
  Admin
  Teacher
  Student
}

enum Status {
  Active
  Inactive
}

enum AssignmentType {
  Daily
  Weekly
}

enum SubmissionStatus {
  Submitted
  Graded
}

enum NotificationStatus {
  Unread
  Read
}

enum TaskCategory {
  Essay
  MultipleChoice
  Project
}

enum ClassStatus {
  Active
  Promoted
  Transferred
  Graduated
  DroppedOut
}
