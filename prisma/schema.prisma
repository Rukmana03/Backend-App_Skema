generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  role             Role
  fcmToken         String?
  refreshToken     String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  username         String         @unique @db.VarChar(50)
  Profile          Profile?
  Assignments      Assignment[]
  TeacherClasses   TeacherClass[]        
  Comments         Comment[]
  FileStorages     FileStorage[]
  Grades           Grade[]
  Notifications    Notification[]
  StudentClasses   StudentClass[]
  Subjects         Subject[]
  Submissions      Submission[]

  @@map("users")
}

model Class {
  id             Int            @id @default(autoincrement())
  schoolId       Int
  className      String
  status         Status
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  assignments    Assignment[]
  teacherClasses TeacherClass[]         
  studentClasses StudentClass[]

  @@map("classes")
}

model TeacherClass {
  id       Int  @id @default(autoincrement())
  teacherId Int
  classId   Int

  teacher User @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherId, classId]) 
  @@map("teacher_classes")
}

model StudentClass {
  id        Int      @id @default(autoincrement())
  classId   Int
  studentId Int
  status    Status
  joinedAt  DateTime @default(now())
  Class     Class    @relation(fields: [classId], references: [id])
  Student   User     @relation(fields: [studentId], references: [id])

  @@map("student_classes")
}

model Subject {
  id          Int          @id @default(autoincrement())
  subjectName String
  teacherId   Int
  assignments Assignment[]
  teacher     User         @relation(fields: [teacherId], references: [id])

  @@map("subjects")
}

model Assignment {
  id             Int            @id @default(autoincrement())
  title          String
  description    String?
  subjectId      Int
  classId        Int
  teacherId      Int
  deadline       DateTime
  assignmentType AssignmentType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  class          Class          @relation(fields: [classId], references: [id])
  subject        Subject        @relation(fields: [subjectId], references: [id])
  teacher        User           @relation(fields: [teacherId], references: [id])
  comments       Comment[]
  submissions    Submission[]

  @@map("assignments")
}

model Submission {
  id             Int              @id @default(autoincrement())
  assignmentId   Int
  studentId      Int
  fileUrl        String?
  submissionDate DateTime
  status         SubmissionStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  grades         Grade[]
  assignment     Assignment       @relation(fields: [assignmentId], references: [id])
  student        User             @relation(fields: [studentId], references: [id])

  @@map("submissions")
}

model Grade {
  id           Int        @id @default(autoincrement())
  submissionId Int
  teacherId    Int
  score        Decimal    @db.Decimal(5, 2)
  feedback     String?
  gradedDate   DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  submission   Submission @relation(fields: [submissionId], references: [id])
  teacher      User       @relation(fields: [teacherId], references: [id])

  @@map("grades")
}

model Comment {
  id           Int        @id @default(autoincrement())
  userId       Int
  assignmentId Int
  content      String
  commentDate  DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int
  message   String
  status    NotificationStatus
  sentDate  DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?
  user      User               @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model FileStorage {
  id         Int       @id @default(autoincrement())
  userId     Int
  fileName   String
  fileUrl    String
  uploadDate DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])

  @@map("file_storages")
}

model Profile {
  bio            String?
  name           String    @db.VarChar(100)
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  id             Int       @id @default(autoincrement())
  identityNumber String    @unique
  profilePhoto   String?
  updatedAt      DateTime
  userId         Int       @unique
  users          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  Admin
  Teacher
  Student
}

enum Status {
  Active
  Inactive
}

enum AssignmentType {
  Daily
  Weekly
}

enum SubmissionStatus {
  Pending
  Submitted
  Graded
}

enum NotificationStatus {
  Unread
  Read
}
