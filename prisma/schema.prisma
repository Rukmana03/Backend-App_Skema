// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int       @id @default(autoincrement())
  email            String    @unique
  password         String
  role             Role
  fcmToken         String?
  isVerified       Boolean   @default(false)
  verificationCode String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?

  Profile        Profile?
  TeacherClasses Class[]        @relation("UserToClass")
  StudentClasses StudentClass[]
  Subjects       Subject[]
  Assignments    Assignment[]
  Submissions    Submission[]
  Grades         Grade[]
  Comments       Comment[]
  Notifications  Notification[]
  FileStorages   FileStorage[]
}

model Profile {
  profile_id      Int       @id @default(autoincrement())
  user_id         Int       @unique
  foto_profile    String?
  bio             String?
  identity_number String    @unique
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  User User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Class {
  class_id   Int       @id @default(autoincrement())
  school_id  Int
  class_name String
  teacher_id Int?
  status     Status
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Teacher        User?          @relation("UserToClass", fields: [teacher_id], references: [user_id], onDelete: SetNull)
  StudentClasses StudentClass[]
  Assignments    Assignment[]
}

model StudentClass {
  student_class_id Int      @id @default(autoincrement())
  class_id         Int
  student_id       Int
  status           Status
  joined_at        DateTime @default(now())

  Class   Class @relation(fields: [class_id], references: [class_id])
  Student User  @relation(fields: [student_id], references: [user_id])
}

model Subject {
  subject_id   Int    @id @default(autoincrement())
  subject_name String
  teacher_id   Int

  Teacher     User         @relation(fields: [teacher_id], references: [user_id])
  Assignments Assignment[]
}

model Assignment {
  assignment_id   Int            @id @default(autoincrement())
  title           String
  description     String?
  subject_id      Int
  class_id        Int
  teacher_id      Int
  deadline        DateTime
  assignment_type AssignmentType
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  deleted_at      DateTime?

  Subject     Subject      @relation(fields: [subject_id], references: [subject_id])
  Class       Class        @relation(fields: [class_id], references: [class_id])
  Teacher     User         @relation(fields: [teacher_id], references: [user_id])
  Submissions Submission[]
  Comments    Comment[]
}

model Submission {
  submission_id   Int              @id @default(autoincrement())
  assignment_id   Int
  student_id      Int
  file_url        String?
  submission_date DateTime
  status          SubmissionStatus
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  deleted_at      DateTime?

  Assignment Assignment @relation(fields: [assignment_id], references: [assignment_id])
  Student    User       @relation(fields: [student_id], references: [user_id])
  Grades     Grade[]
}

model Grade {
  grade_id      Int       @id @default(autoincrement())
  submission_id Int
  teacher_id    Int
  score         Decimal   @db.Decimal(5, 2)
  feedback      String?
  graded_date   DateTime
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  Submission Submission @relation(fields: [submission_id], references: [submission_id])
  Teacher    User       @relation(fields: [teacher_id], references: [user_id])
}

model Comment {
  comment_id    Int       @id @default(autoincrement())
  user_id       Int
  assignment_id Int
  content       String
  comment_date  DateTime
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  User       User       @relation(fields: [user_id], references: [user_id])
  Assignment Assignment @relation(fields: [assignment_id], references: [assignment_id])
}

model Notification {
  notification_id Int                @id @default(autoincrement())
  user_id         Int
  message         String
  status          NotificationStatus
  sent_date       DateTime
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  deleted_at      DateTime?

  User User @relation(fields: [user_id], references: [user_id])
}

model FileStorage {
  file_id     Int       @id @default(autoincrement())
  user_id     Int
  file_name   String
  file_url    String
  upload_date DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  User User @relation(fields: [user_id], references: [user_id])
}

enum Role {
  Admin
  Teacher
  Student
}

enum Status {
  Active
  Inactive
}

enum AssignmentType {
  Daily
  Weekly
}

enum SubmissionStatus {
  Pending
  Submitted
  Graded
}

enum NotificationStatus {
  Unread
  Read
}
